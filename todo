#!/bin/bash

usage(){
	echo -n
	fmt <<EOF
DESCRIPTION
	Manage the ~/.todo todo file.
	
USAGE
	todo
		Show the todo list.

	todo -a,--add TASK [TASK ...]
		Add TASK.
	
	todo -e,--edit TASKNUMBER TASK
		Change the description of TASKNUMBER to TASK.

	todo -d,--done TASKNUMBER [TASKNUMBER ...]
		Mark TASKNUMBER as done.
		
	todo -u,--undo TASKNUMBER [TASKNUMBER ...]
		Mark TASKNUMBER as not done.

	todo -p,--purge
		Delete all tasks marked as done.

	todo -x,--delete TASKNUMBER [TASKNUMBER ...]
		Delete TASKNUMBER.
EOF
	exit
}
die(){ echo -e "Error: ${1:-"Unknown error at line $LINENO."}" 1>&2; exit 1; }
require(){ command -v $1 > /dev/null 2>&1 || { suggestion=""; if [ ! -z "$2" ]; then suggestion=" $2"; fi; die "$1 is not installed.$suggestion"; } }
if [ $# -eq 1 ]; then if [ "$1" = "--help" -o "$1" = "-h" ]; then usage; fi fi
#End boilerplate

todoFile="$HOME/.todo"

printTodo () {
	todoNumber=1
	lineCount=$(cat "$todoFile" | wc -l)
	if [ $lineCount -gt 0 ]; then
		echo -e ""
	    	while read todoString
		do
			if [ "$todoString" != "" ]; then
				status=$(echo -e "$todoString" | cut -c1-1)
				todo=$(echo -e "$todoString" | cut -c2-)

				if [ "$status" = "-" ]; then
					statusString=$(echo -e '\E[0;31m'"\033[1m-\033[0m")
					todo=$(echo -e '\E[1m'"$todo\033[0m")
				else
					statusString=$(echo -e '\E[0;32m'"\033[1mâœ“\033[0m")
					todo=$(echo -e '\E[37m'"$todo\033[0m")
				fi

				todoSpacing=""
				if [ $todoNumber -lt 10 ]; then
					todoSpacing=" "
				fi

				echo -e "\t\033[1m$todoSpacing#$todoNumber\033[0m $statusString $todo"
				let todoNumber=$todoNumber+1
			fi
		done < "$todoFile"
		echo -e ""
	fi
}

if [ $# -eq 1 ]; then
	if [ "$1" = "--purge" -o "$1" = "-p" ]; then
		sed --follow-symlinks -i "/^x/d" "$todoFile"
	fi
fi

if [ $# -ge 2 ]; then
	if [ "$1" = "--add" -o "$1" = "-a" ]; then
		for var in "${@:2}"
		do
			echo -e "-${var}" | tee -a "$todoFile" > /dev/null
		done
	fi
	
	if [ "$1" = "--delete" -o "$1" = "-x" ]; then
		for ((i=2; i<=$#; i++))
		do
			if [[ "${!i}" =~ ^[0-9]+$ ]]; then
				sed --follow-symlinks -i "${!i}"'s/^[x\-]/d/' "$todoFile"
			else
				die "Expecting a number."
			fi
		done
		sed --follow-symlinks -i "/^d/d" "$todoFile"
	fi

	if [ "$1" = "--done" -o "$1" = "-d" ]; then
		for ((i=2; i<=$#; i++))
		do
			if [[ "${!i}" =~ ^[0-9]+$ ]]; then
				sed --follow-symlinks -i "${!i} s/^\-/x/ig" "$todoFile"
			else
				die "Expecting a number."
			fi
		done
	fi

	if [ "$1" = "--undo" -o "$1" = "-u" ]; then
		for ((i=2; i<=$#; i++))
		do
			if [[ "${!i}" =~ ^[0-9]+$ ]]; then
				sed --follow-symlinks -i "${!i} s/^x/-/ig" "$todoFile"
			else
				die "Expecting a number."
			fi
		done
	fi
fi

if [ $# -eq 3 ]; then
	if [ "$1" = "swap" ]; then
		lineCount=$(cat "$todoFile" | wc -l)
		if [[ $lineCount -lt 2 ]]; then
			die "Not enough lines."
		else
			if ! [[ "$2" =~ ^[0-9]+$ ]] ||  ! [[ "$3" =~ ^[0-9]+$ ]]; then
				die "Expecting a number."
			else
				if [[ $2 -gt $lineCount ]] || [[ $3 -gt $lineCount ]]; then
					die "Out of range."
				else
					awk -v var="$2" -v var1="$3" 'NR==var {
					  s=$0
					  for(i=var+1;i<var1;i++){
					    getline;s=$0"\n"s
					  }
					  getline;print;print s
					  next
					}1' "$todoFile" > "todo-tmp"
					mv "todo-tmp" "$todoFile"
				fi
			fi
		fi
	fi

	if [ "$1" = "--edit" -o "$1" = "-e" ]; then
		if [[ "$2" =~ ^[0-9]+$ ]]; then
			sed --follow-symlinks --regexp-extended -i "${2}"'s/^([x\-]).*/\1'"${3}"'/' "$todoFile"
		else
			die "Expecting a number."
		fi
	fi
fi

printTodo
